# Don't warn about unresolved references at all.
-dontwarn

# Don't print notes about potential mistakes or omissions in the configuration.
-dontnote

# Print warnings about unresolved references, but continue processing anyhow.
#-ignorewarnings

# The number of optimization passes to be performed.
-optimizationpasses 5

# When not preverifing in a case-insensitive filing system, such as Windows. Because this tool unpacks your processed jars, you should then use:
-dontusemixedcaseclassnames

# Specifies not to ignore non-public library classes. As of version 4.5, this is the default setting
-dontskipnonpubliclibraryclasses

# Preverification is irrelevant for the dex compiler and the Dalvik VM, so we can switch it off with the -dontpreverify option.
-dontpreverify

# Specifies to write out some more information during processing. If the program terminates with an exception, this option will print out the entire stack trace, instead of just the exception message.
-verbose

# Specifies the program jars
#-injars     bin/classes
-injars     libs/acra-4.4.0.jar
-injars     libs/nbi.jar
-injars     libs/spamrep.jar
-injars     libs/log4j-1.2.16.jar
-injars     libs/jmmslib.jar
-injars     libs/commons-codec-1.4.jar
-injars     libs/ANMLibrary.jar

# Specifies the names of the output jars
-outjars bin/classes-processed.jar

# Don't shrink the input class files.
# -dontshrink

# Don't optimize the input class files.
-dontoptimize

# The optimizations to be enabled and disabled. ref: http://proguard.sourceforge.net/index.html#/manual/optimizations.html
#-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*

# Don't obfuscate the input class files.
#-dontobfuscate

#To repackage classes on a single package
#-repackageclasses ''

# Uncomment if using annotations to keep them.
-keepattributes *Annotation*

#Keep classes that are referenced on the AndroidManifest
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class com.android.vending.licensing.ILicensingService

# nbi
-keep class nbisdk.** { *; }
-keep class com.nbi.** { *; }
-keep class com.navbuilder.** { *; }

# app classes
-keep class com.rocketmobile.asimov.Asimov { *; }
-keep class com.google.i18n.phonenumbers.** { *; }
-keep class com.verizon.** { *; }
-keep class com.vzw.** { *; }
-keep class com.vzw.vma.** { *; }
-keep class com.beetstra.** { *; }


# stub classes
-keep class android.annotation.** { *; }
-keep class android.database.** { *; }
-keep class android.drm.** { *; }
-keep class android.media.** { *; }
-keep class android.os.** { *; }
-keep class android.provider.** { *; }
-keep class android.telephony.** { *; }
-keep class org.w3c.dom.** { *; }
-keep class com.cloudmark.** { *; }

# vma
-keep class com.sun.activation.** { *; }
-keep class javax.activation.** { *; }
-keep class org.apache.harmony.** { *; }
-keep class myjava.awt.** { *; }
-keep class org.apache.james.** { *; }
-keep class org.htmlcleaner.** { *; }
-keep class org.jcraft.** { *; }
-keep class com.sun.mail.** { *; }
-keep class javax.mail.** { *; }

#To remove debug logs:
-assumenosideeffects class android.util.Log {
    public static *** d(...);
    public static *** v(...);
}

#To avoid changing names of methods invoked on layout's onClick.
# Uncomment and add specific method names if using onClick on layouts
#-keepclassmembers class * {
# public void onClickButton(android.view.View);
#}

#Maintain java native methods 
-keepclasseswithmembernames class * {
    native <methods>;
}

#To maintain custom components names that are used on layouts XML.
#Uncomment if having any problem with the approach below
#-keep public class custom.components.package.and.name.**

#To maintain custom components names that are used on layouts XML:
-keep public class * extends android.view.View {
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
    public void set*(...);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

#Maintain enums
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

#To keep parcelable classes (to serialize - deserialize objects to sent through Intents)
-keep class * implements android.os.Parcelable {
  public static final android.os.Parcelable$Creator *;
}

#Keep the R
-keepclassmembers class **.R$* {
    public static <fields>;
}

###### ACRA Specifics ###### 
# we need line numbers in our stack traces otherwise they are pretty useless
-renamesourcefileattribute SourceFile
-keepattributes SourceFile,LineNumberTable

# ACRA needs "annotations" so add this... 
-keepattributes *Annotation*

# keep this class so that logging will show 'ACRA' and not a obfuscated name like 'a'.
# Note: if you are removing log messages elsewhere in this file then this isn't necessary
-keep class org.acra.** { *; }

# keep this around for some enums that ACRA needs
-keep class org.acra.ReportingInteractionMode { *; }

# keep this otherwise it is removed by ProGuard
-keep public class org.acra.ErrorReporter {
	public void addCustomData(java.lang.String,java.lang.String);
}

# keep this otherwise it is removed by ProGuard
-keep public class org.acra.ErrorReporter {
	public org.acra.ErrorReporter$ReportsSenderWorker handleSilentException(java.lang.Throwable);
}

###### ADDITIONAL OPTIONS NOT USED NORMALLY
#To keep callback calls. Uncomment if using any
#http://proguard.sourceforge.net/index.html#/manual/examples.html#callback
#-keep class mypackage.MyCallbackClass {
#   void myCallbackMethod(java.lang.String);
#}

#Uncomment if using Serializable 
#-keepclassmembers class * implements java.io.Serializable {
#    private static final java.io.ObjectStreamField[] serialPersistentFields;
#    private void writeObject(java.io.ObjectOutputStream);
#    private void readObject(java.io.ObjectInputStream);
#    java.lang.Object writeReplace();
#    java.lang.Object readResolve();
#}